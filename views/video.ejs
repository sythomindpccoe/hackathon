<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Video Upload - Crowd Count</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      color: #333;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    .nav-container {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      padding: 15px;
      margin-bottom: 30px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }

    .nav-links {
      display: flex;
      justify-content: center;
      gap: 20px;
      flex-wrap: wrap;
    }

    .nav-links a {
      color: #667eea;
      text-decoration: none;
      padding: 12px 24px;
      border-radius: 50px;
      background: linear-gradient(135deg, #f5f7ff 0%, #e8ebff 100%);
      border: 2px solid transparent;
      transition: all 0.3s ease;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .nav-links a:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }

    .main-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 25px;
      padding: 40px;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    h1 {
      text-align: center;
      color: #2d3748;
      font-size: 2.5rem;
      margin-bottom: 10px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .subtitle {
      text-align: center;
      color: #718096;
      font-size: 1.1rem;
      margin-bottom: 40px;
    }

    .upload-section {
      background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
      border-radius: 20px;
      padding: 40px;
      margin-bottom: 30px;
      border: 3px dashed #667eea;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .upload-section::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(102, 126, 234, 0.1) 0%, transparent 70%);
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .upload-section:hover::before {
      opacity: 1;
    }

    .upload-section:hover {
      border-color: #764ba2;
      transform: scale(1.02);
      background: linear-gradient(135deg, #edf2f7 0%, #e2e8f0 100%);
    }

    .upload-section.dragover {
      border-color: #38a169;
      background: linear-gradient(135deg, #f0fff4 0%, #c6f6d5 100%);
      transform: scale(1.05);
    }

    .upload-icon {
      font-size: 4rem;
      margin-bottom: 20px;
      position: relative;
      z-index: 1;
    }

    .upload-text {
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 10px;
      color: #2d3748;
      position: relative;
      z-index: 1;
    }

    .upload-subtext {
      color: #718096;
      font-size: 1rem;
      position: relative;
      z-index: 1;
    }

    #videoInput {
      display: none;
    }

    .controls {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-bottom: 30px;
      flex-wrap: wrap;
    }

    .btn {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 15px 30px;
      border: none;
      border-radius: 50px;
      cursor: pointer;
      font-size: 1rem;
      font-weight: 600;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
      position: relative;
      overflow: hidden;
    }

    .btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s;
    }

    .btn:hover::before {
      left: 100%;
    }

    .btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
    }

    .btn:disabled {
      background: #a0aec0;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .btn-secondary {
      background: linear-gradient(135deg, #718096 0%, #4a5568 100%);
      box-shadow: 0 4px 15px rgba(113, 128, 150, 0.3);
    }

    .loading {
      display: none;
      text-align: center;
      padding: 40px;
      background: linear-gradient(135deg, #ebf8ff 0%, #bee3f8 100%);
      border-radius: 20px;
      margin: 30px 0;
    }

    .loading-spinner {
      width: 60px;
      height: 60px;
      border: 4px solid #e2e8f0;
      border-top: 4px solid #667eea;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 0 auto 20px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .progress-bar {
      width: 100%;
      height: 8px;
      background: #e2e8f0;
      border-radius: 4px;
      overflow: hidden;
      margin: 20px 0;
    }

    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #667eea, #764ba2);
      width: 0%;
      transition: width 0.3s ease;
      border-radius: 4px;
    }

    .error {
      background: linear-gradient(135deg, #fed7d7 0%, #fc8181 100%);
      color: #742a2a;
      padding: 20px;
      border-radius: 15px;
      margin: 20px 0;
      display: none;
      border-left: 5px solid #e53e3e;
    }

    .results {
      display: none;
      margin-top: 40px;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }

    .stat-card {
      background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
      padding: 25px;
      border-radius: 15px;
      text-align: center;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(102, 126, 234, 0.1);
    }

    .stat-value {
      font-size: 2rem;
      font-weight: bold;
      color: #667eea;
      margin-bottom: 5px;
    }

    .stat-label {
      color: #718096;
      font-size: 0.9rem;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .frames-container {
      background: #f7fafc;
      border-radius: 20px;
      padding: 30px;
      margin-top: 30px;
    }

    .frames-title {
      text-align: center;
      font-size: 1.5rem;
      color: #2d3748;
      margin-bottom: 25px;
    }

    .frames-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 25px;
    }

    .frame-card {
      background: white;
      border-radius: 15px;
      overflow: hidden;
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
      transition: transform 0.3s ease;
    }

    .frame-card:hover {
      transform: translateY(-5px);
    }

    .frame-images {
      display: grid;
      grid-template-columns: 1fr 1fr;
    }

    .frame-image {
      width: 100%;
      height: 150px;
      object-fit: cover;
    }

    .frame-info {
      padding: 15px;
      background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
    }

    .frame-timestamp {
      font-weight: bold;
      color: #667eea;
      margin-bottom: 5px;
    }

    .frame-count {
      color: #2d3748;
      font-size: 1.1rem;
    }

    @media (max-width: 768px) {
      .container {
        padding: 10px;
      }

      .main-card {
        padding: 20px;
      }

      h1 {
        font-size: 2rem;
      }

      .controls {
        flex-direction: column;
        align-items: center;
      }

      .frames-grid {
        grid-template-columns: 1fr;
      }

      .stats-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="nav-container">
      <div class="nav-links">
        <a href="/">üì± Live Stream</a>
        <a href="/monitor">üìä Monitor</a>
        <a href="/upload">üì§ Upload Image</a>
        <a href="/video">üé• Video Analysis</a>
      </div>
    </div>

    <div class="main-card">
      <h1>üé• Video Crowd Analysis</h1>
      <p class="subtitle">Upload a video to analyze crowd density frame by frame with continuous people counting</p>

      <div class="upload-section" onclick="document.getElementById('videoInput').click()">
        <div class="upload-icon">üé¨</div>
        <div class="upload-text">Click to upload a video</div>
        <div class="upload-subtext">or drag and drop a video file here</div>
        <div class="upload-subtext">Supported formats: MP4, AVI, MOV, WebM (max 100MB)</div>
      </div>

      <input type="file" id="videoInput" accept="video/*" />

      <div class="controls">
        <button class="btn" id="analyzeBtn" disabled>üîç Analyze Video</button>
        <button class="btn btn-secondary" id="clearBtn" onclick="clearResults()">üóëÔ∏è Clear</button>
      </div>

      <div class="loading" id="loading">
        <div class="loading-spinner"></div>
        <h3>Processing Video...</h3>
        <p>Extracting frames and analyzing crowd density. This may take several minutes.</p>
        <div class="progress-bar">
          <div class="progress-fill" id="progressFill"></div>
        </div>
        <p id="progressText">Initializing...</p>
      </div>

      <div class="error" id="error"></div>

      <div class="results" id="results">
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value" id="totalFrames">0</div>
            <div class="stat-label">Total Frames</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="avgPeople">0</div>
            <div class="stat-label">Avg People</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="maxPeople">0</div>
            <div class="stat-label">Max People</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="duration">0s</div>
            <div class="stat-label">Duration</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="totalPeople">0</div>
            <div class="stat-label">Total People</div>
          </div>
        </div>

        <div class="frames-container">
          <h3 class="frames-title">üé• Video Analysis Results</h3>
          
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin-bottom: 30px;">
            <div style="text-align: center;">
              <h4 style="margin-bottom: 15px; color: #4a5568;">üìπ Original Video</h4>
              <video id="originalVideo" controls style="width: 100%; max-height: 300px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.2);"></video>
            </div>
            
            <div style="text-align: center;">
              <h4 style="margin-bottom: 15px; color: #4a5568;">üéØ Annotated Video with Live Count</h4>
              <video id="annotatedVideo" controls style="width: 100%; max-height: 300px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.2);"></video>
              <p style="font-size: 14px; color: #666; margin-top: 10px; font-style: italic;">
                Shows detected people as red dots with real-time count panel
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    const videoInput = document.getElementById('videoInput');
    const analyzeBtn = document.getElementById('analyzeBtn');
    const uploadSection = document.querySelector('.upload-section');
    const loading = document.getElementById('loading');
    const error = document.getElementById('error');
    const results = document.getElementById('results');
    const progressFill = document.getElementById('progressFill');
    const progressText = document.getElementById('progressText');

    let selectedFile = null;

    // File input change handler
    videoInput.addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (file) {
        handleFileSelect(file);
      }
    });

    // Drag and drop handlers
    uploadSection.addEventListener('dragover', function(e) {
      e.preventDefault();
      uploadSection.classList.add('dragover');
    });

    uploadSection.addEventListener('dragleave', function(e) {
      e.preventDefault();
      uploadSection.classList.remove('dragover');
    });

    uploadSection.addEventListener('drop', function(e) {
      e.preventDefault();
      uploadSection.classList.remove('dragover');
      
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        const file = files[0];
        if (file.type.startsWith('video/')) {
          videoInput.files = files;
          handleFileSelect(file);
        } else {
          showError('Please select a valid video file.');
        }
      }
    });

    function handleFileSelect(file) {
      selectedFile = file;
      analyzeBtn.disabled = false;
      analyzeBtn.innerHTML = `üîç Analyze "${file.name.substring(0, 20)}${file.name.length > 20 ? '...' : ''}"`;
      hideError();
      hideResults();
    }

    analyzeBtn.addEventListener('click', function() {
      if (!selectedFile) {
        showError('Please select a video first.');
        return;
      }

      const formData = new FormData();
      formData.append('video', selectedFile);

      showLoading();
      hideError();
      hideResults();

      // Simulate progress for user feedback
      let progress = 0;
      const progressInterval = setInterval(() => {
        progress += Math.random() * 10;
        if (progress > 90) progress = 90;
        updateProgress(progress, 'Processing frames...');
      }, 1000);

      fetch('/predict-video', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        clearInterval(progressInterval);
        updateProgress(100, 'Complete!');
        
        setTimeout(() => {
          hideLoading();
          
          if (data.success) {
            showResults(data);
          } else {
            showError(data.error || 'Failed to process video');
          }
        }, 500);
      })
      .catch(err => {
        clearInterval(progressInterval);
        hideLoading();
        showError('Network error: ' + err.message);
      });
    });

    function showResults(data) {
      // Update statistics
      document.getElementById('totalFrames').textContent = data.totalFrames;
      document.getElementById('avgPeople').textContent = data.statistics.averagePeople;
      document.getElementById('maxPeople').textContent = data.statistics.maxPeople;
      document.getElementById('duration').textContent = data.statistics.duration;
      document.getElementById('totalPeople').textContent = data.statistics.totalPeople;

      // Set up videos
      const originalVideo = document.getElementById('originalVideo');
      const annotatedVideo = document.getElementById('annotatedVideo');
      
      originalVideo.src = data.originalVideo;
      if (data.annotatedVideo) {
        annotatedVideo.src = data.annotatedVideo;
        annotatedVideo.style.display = 'block';
      } else {
        annotatedVideo.style.display = 'none';
      }

      results.style.display = 'block';
    }

    function updateProgress(percent, text) {
      progressFill.style.width = percent + '%';
      progressText.textContent = text;
    }

    function showLoading() {
      loading.style.display = 'block';
      updateProgress(0, 'Uploading video...');
    }

    function hideLoading() {
      loading.style.display = 'none';
    }

    function showError(message) {
      error.textContent = '‚ùå ' + message;
      error.style.display = 'block';
    }

    function hideError() {
      error.style.display = 'none';
    }

    function hideResults() {
      results.style.display = 'none';
    }

    function clearResults() {
      selectedFile = null;
      videoInput.value = '';
      analyzeBtn.disabled = true;
      analyzeBtn.innerHTML = 'üîç Analyze Video';
      hideError();
      hideResults();
    }
  </script>
</body>
</html>
